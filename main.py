from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from unidecode import unidecode

import json
import datetime

from database import session, User
from context import Balans


config = json.load(open('config.json', 'rb'))

bot = Bot(config['TOKEN'])
dp = Dispatcher(bot, storage=MemoryStorage())

price = {'price': 20}
msg = {'message': None}

@dp.message_handler(commands=['start'])
async def start(m: types.Message):
    build = ReplyKeyboardMarkup(resize_keyboard=True)
    build.add(
        types.KeyboardButton('üì∑ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è'),
        types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å'),
        types.KeyboardButton('üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞'),
        types.KeyboardButton('üìï –ü—Ä–∞–≤–∏–ª–∞'),
    )

    if m.from_user.id not in [i.user_id for i in session.query(User.user_id).distinct()]:
        user = User(
            username=unidecode(m.from_user.full_name), 
            user_id=m.from_user.id, 
            balans=0, 
            regis=str(datetime.datetime.now()),
            uniqueized=0,
            comand='–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
            )

        session.add(user)
        session.commit()
        session.close()

    await m.reply("""
    –ü—Ä–∏–≤–µ—Ç, –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∫—Ä—É—Ç–∫–µ?

–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: https://telegra.ph/Pravila-TrafUniqueBot-10-18
    """, reply_markup=build)

@dp.message_handler(text='üì∑ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è')
async def uniqueized(m: types.Message):
    
    balans = [[i.balans] for i in session.query(User).filter_by(username=m.from_user.full_name)][0][0]

    if balans < price['price']:

        await m.reply(f'''–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.
        –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å - {price['price']}‚ÇΩ''')
    else:
        await m.reply('goal')

@dp.message_handler(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å', state=None)
async def profil(m: types.Message, state: FSMContext):
    markup = InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='balans_pluse'),
        types.InlineKeyboardButton('üéü–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='promocode')
    )
    
    user = [{
        'username': i.username, 
        'user_id': i.user_id, 
        'balans': i.balans,
        'regis': i.regis,
        'uniqueized': i.uniqueized,
        'comand': i.comand} for i in session.query(User).filter_by(username=m.from_user.full_name)][0]

    await m.reply(f'''
    üîë –ü—Ä–æ—Ñ–∏–ª—å
    
    
    –í–∞—à ID: {user['user_id']}
    –ë–∞–ª–∞–Ω—Å: {user['balans']}
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['regis']}
    –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {user['uniqueized']}
    –ö–æ–º–∞–Ω–¥–∞: {user['comand']}''', reply_markup=markup)

    await state.finish()

@dp.callback_query_handler(text='balans_pluse', state=None)
async def balans_pluse(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('‚Ü™Ô∏è–ù–∞–∑–∞–¥', callback_data='profil_false' )
    )

    msg['message'] = await call.message.edit_text(
        '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', reply_markup=markup)
    

    await Balans.balans.set()

@dp.callback_query_handler(text='profil_false', state=Balans.balans)
async def profil_false(call: types.CallbackQuery, state: FSMContext):
    markup = InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='balans_pluse'),
        types.InlineKeyboardButton('üéü–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='promocode')
    )
    
    user = [{
        'username': i.username, 
        'user_id': i.user_id, 
        'balans': i.balans,
        'regis': i.regis,
        'uniqueized': i.uniqueized,
        'comand': i.comand} for i in session.query(User).filter_by(username=call.from_user.full_name)][0]

    await call.message.edit_text(f'''
    üîë –ü—Ä–æ—Ñ–∏–ª—å
    
    
    –í–∞—à ID: {user['user_id']}
    –ë–∞–ª–∞–Ω—Å: {user['balans']}
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['regis']}
    –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {user['uniqueized']}
    –ö–æ–º–∞–Ω–¥–∞: {user['comand']}''', reply_markup=markup)

    await state.finish()

@dp.message_handler(state=Balans.balans)
async def balans_pluse_2(m: types.Message, state: FSMContext):
    markup = InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('‚òëÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='sea_balans'),
        types.InlineKeyboardButton('üí≥–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url='https://zelenka.guru/'),
        types.InlineKeyboardButton('üö´–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂', callback_data='del_balans'),    
    )

    text = m.text
    today = str(datetime.datetime.today())

    await msg['message'].delete()

    msg['message'] = await m.reply(
        f'''
        üí¥–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        ‚îúüë§–í–∞—à ID: {m.from_user.id}
        ‚îúüí∞–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {text}‚ÇΩ
        ‚îú‚úîÔ∏è–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: LolzTeam Market üí≤
        ‚îúüóì–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {today}
        ‚îúüïü–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ–∫–∞: –ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ
        ‚îîüí¨–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): zcSUS
        ''', reply_markup=markup)
    
    await bot.delete_message(chat_id=m.from_user.id, message_id=m.message_id)
    
    await state.finish() 

@dp.callback_query_handler(text='del_balans')
async def del_balans(m: types.Message):
    await msg['message'].delete()


@dp.message_handler(text='üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
async def supports(m: types.Message):
    await m.reply(
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã - –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–∞–ø–ø–æ—Ä—Ç—É'
    )

@dp.message_handler(text='üìï –ü—Ä–∞–≤–∏–ª–∞')
async def supports(m: types.Message):
    await m.reply(
        '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–¥–µ—Å—å:\nhttps://telegra.ph/Pravila-TrafUniqueBot-10-18'
    )


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)